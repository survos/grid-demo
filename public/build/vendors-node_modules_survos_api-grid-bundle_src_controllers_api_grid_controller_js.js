"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_survos_api-grid-bundle_src_controllers_api_grid_controller_js"],{

/***/ "./node_modules/@survos/api-grid-bundle/src/controllers/api_grid_controller.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@survos/api-grid-bundle/src/controllers/api_grid_controller.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var datatables_net_bs5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! datatables.net-bs5 */ "./node_modules/datatables.net-bs5/js/dataTables.bootstrap5.js");
/* harmony import */ var datatables_net_bs5__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(datatables_net_bs5__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var datatables_net_select_bs5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! datatables.net-select-bs5 */ "./node_modules/datatables.net-select-bs5/js/select.bootstrap5.js");
/* harmony import */ var datatables_net_select_bs5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(datatables_net_select_bs5__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var datatables_net_responsive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! datatables.net-responsive */ "./node_modules/datatables.net-responsive/js/dataTables.responsive.mjs");
/* harmony import */ var datatables_net_buttons_bs5__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! datatables.net-buttons-bs5 */ "./node_modules/datatables.net-buttons-bs5/js/buttons.bootstrap5.js");
/* harmony import */ var datatables_net_buttons_bs5__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(datatables_net_buttons_bs5__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var datatables_net_scroller_bs5__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! datatables.net-scroller-bs5 */ "./node_modules/datatables.net-scroller-bs5/js/scroller.bootstrap5.js");
/* harmony import */ var datatables_net_scroller_bs5__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(datatables_net_scroller_bs5__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var datatables_net_buttons_js_buttons_colVis_min__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! datatables.net-buttons/js/buttons.colVis.min */ "./node_modules/datatables.net-buttons/js/buttons.colVis.min.js");
/* harmony import */ var datatables_net_buttons_js_buttons_colVis_min__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(datatables_net_buttons_js_buttons_colVis_min__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var datatables_net_buttons_js_buttons_html5_min__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! datatables.net-buttons/js/buttons.html5.min */ "./node_modules/datatables.net-buttons/js/buttons.html5.min.js");
/* harmony import */ var datatables_net_buttons_js_buttons_html5_min__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(datatables_net_buttons_js_buttons_html5_min__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var datatables_net_buttons_js_buttons_print_min__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! datatables.net-buttons/js/buttons.print.min */ "./node_modules/datatables.net-buttons/js/buttons.print.min.js");
/* harmony import */ var datatables_net_buttons_js_buttons_print_min__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(datatables_net_buttons_js_buttons_print_min__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js */ "./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js");
/* harmony import */ var _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var twig_twig_min__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! twig/twig.min */ "./node_modules/twig/twig.min.js");
/* harmony import */ var twig_twig_min__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(twig_twig_min__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! bootstrap/js/dist/modal */ "./node_modules/bootstrap/js/dist/modal.js");
/* harmony import */ var bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12__);
// during dev, from project_dir run
// ln -s ~/survos/bundles/api-grid-bundle/assets/src/controllers/sandbox_api_controller.js assets/controllers/sandbox_api_controller.js






// import 'datatables.net-responsive-bs5';






// shouldn't these be automatically included (from package.json)
// import 'datatables.net-scroller';
// import 'datatables.net-scroller-bs5';
// import 'datatables.net-datetime';
// import 'datatables.net-searchbuilder-bs5';
// import 'datatables.net-fixedheader-bs5';
// import 'datatables.net-responsive-bs5';
// const DataTable = require('datatables.net');
// import('datatables.net-buttons-bs5');

// import('datatables.net-bs5');
// import('datatables.net-select-bs5');

// if component
let routes = false;


routes = __webpack_require__(/*! ../../../../../public/js/fos_js_routes.json */ "./public/js/fos_js_routes.json");
// if a local test.
// routes = require('../../public/js/fos_js_routes.json');
// import Routing from '../../vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js';
_vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default().setRoutingData(routes);


twig_twig_min__WEBPACK_IMPORTED_MODULE_11___default().extend(function (Twig) {
    Twig._function.extend('path', (route, routeParams) => {
        return _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default().generate(route, routeParams);
    });
});


// import {Modal} from "bootstrap"; !!
// https://stackoverflow.com/questions/68084742/dropdown-doesnt-work-after-modal-of-bootstrap-imported

// import cb from "../js/app-buttons";


console.assert((_vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default()), 'Routing is not defined');
// global.Routing = Routing;

// try {
// } catch (e) {
//     console.error(e);
//     console.warn("FOS JS Routing not loaded, so path() won't work");
// }

const contentTypes = {
    'PATCH': 'application/merge-patch+json',
    'POST': 'application/json'
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
    static targets = ['table', 'modal', 'modalBody', 'fieldSearch', 'message'];
    static values = {
        apiCall: {type: String, default: ''},
        columnConfiguration: {type: String, default: '[]'},
        sortableFields: {type: String, default: '[]'},
        searchableFields: {type: String, default: '[]'},
        searchBuilderFields: {type: String, default: '[]'},
        filter: String
    }

    cols() {
        let x = this.columns.map(  c => {
            let render = null;
            if (c.twigTemplate) {
                let template = twig_twig_min__WEBPACK_IMPORTED_MODULE_11___default().twig({
                    data: c.twigTemplate
                });
                render = ( data, type, row, meta ) => {
                    return template.render({data: data, row: row, field_name: c.name})
                }
            }

            if (c.name === '_actions') {
                return this.actions({prefix: c.prefix, actions: c.actions})
            }

            return this.c({
                propertyName: c.name,
                data: c.name,
                label: c.title,
                route: c.route,
                render: render
            })
        });
        return x;

    }
    connect() {
        const event = new CustomEvent("changeFormUrlEvent", {formUrl: 'testing formURL!' });
        window.dispatchEvent(event);


        this.columns = JSON.parse(this.columnConfigurationValue);
        // "compile" the custom twig blocks
        // var columnRender = [];

        this.filter = JSON.parse(this.filterValue||'[]')
        this.sortableFields = JSON.parse(this.sortableFieldsValue);
        this.searchableFields = JSON.parse(this.searchableFieldsValue);
        this.searchBuilderFields = JSON.parse(this.searchBuilderFieldsValue);
        console.log('hi from ' + this.identifier);
        super.connect(); //

        // console.log(this.hasTableTarget ? 'table target exists' : 'missing table target')
        // console.log(this.hasModalTarget ? 'target exists' : 'missing modalstarget')
        // // console.log(this.fieldSearch ? 'target exists' : 'missing fieldSearch')
        // console.log(this.sortableFieldsValue);
        console.assert(this.hasModalTarget, "Missing modal target");
        this.that = this;
        this.tableElement = false;
        if (this.hasTableTarget) {
            this.tableElement = this.tableTarget;
        } else if (this.element.tagName === 'TABLE') {
            this.tableElement = this.element;
        } else {
            this.tableElement = document.getElementsByTagName('table')[0];
        }
        // else {
        //     console.error('A table element is required.');
        // }
        if (this.tableElement) {
            this.dt = this.initDataTable(this.tableElement);
            this.initialized = true;
        }

    }

    openModal(e) {
        console.error('yay, open modal!', e, e.currentTarget, e.currentTarget.dataset);

        this.modalTarget.addEventListener('show.bs.modal',  (e) => {
            console.log(e, e.relatedTarget, e.currentTarget);
            // do something...
        });

        this.modal = new (bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12___default())(this.modalTarget);
        console.log(this.modal);
        this.modal.show();

    }

    createdRow( row, data, dataIndex )
    {
        // we could add the thumbnail URL here.
        // console.log(row, data, dataIndex, this.identifier);
        // let aaController = 'projects';
        // row.classList.add("text-danger");
        // row.setAttribute('data-action', aaController + '#openModal');
        // row.setAttribute('data-controller', 'modal-form', {formUrl: 'test'});
    }

    notify(message) {
        console.log(message);
        this.messageTarget.innerHTML = message;
    }



    handleTrans(el)
    {
        let transitionButtons = el.querySelectorAll('button.transition');
        // console.log(transitionButtons);
        transitionButtons.forEach( btn => btn.addEventListener('click', (event) => {
            const isButton = event.target.nodeName === 'BUTTON';
            if (!isButton) {
                return;
            }
            console.log(event, event.target, event.currentTarget);

            let row  = this.dt.row( event.target.closest('tr') );
            let  data = row.data();
            console.log(row, data);
            this.notify('deleting ' + data.id);

            // console.dir(event.target.id);
        }));

    }

    requestTransition(route, entityClass, id) {

    }

    // eh... not working
    get modalController() {
        return this.application.getControllerForElementAndIdentifier(this.modalTarget, "modal_form")
    }

    addButtonClickListener(dt)
    {
        console.log("Listening for button.transition and button .btn-modal clicks events");

        dt.on('click', 'tr td button.transition',  ($event) => {
            console.log($event.currentTarget);
            let target = $event.currentTarget;
            var data = dt.row( target.closest('tr') ).data();
            let transition = target.dataset['t'];
            console.log(transition, target);
            console.log(data, $event);
            this.that.modalBodyTarget.innerHTML = transition;
            this.modal = new (bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12___default())(this.modalTarget);
            this.modal.show();

        });

        // dt.on('click', 'tr td button .btn-modal',  ($event, x) => {
        dt.on('click', 'tr td button ',  ($event, x) => {
            console.log($event, $event.currentTarget);
            var data = dt.row( $event.currentTarget.closest('tr') ).data();
            console.log(data, $event, x);
            console.warn("dispatching changeFormUrlEvent");
            const event = new CustomEvent("changeFormUrlEvent", {formUrl: 'test' });
            window.dispatchEvent(event);


            let btn = $event.currentTarget;
            let modalRoute = btn.dataset.modalRoute;
            if (modalRoute) {
                this.modalBodyTarget.innerHTML = data.code;
                this.modal = new (bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12___default())(this.modalTarget);
                this.modal.show();
                console.assert(data.uniqueIdentifiers, "missing uniqueIdentifiers, add @Groups to entity")
                let formUrl = _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default().generate(modalRoute, {...data.uniqueIdentifiers, _page_content_only: 1});
                console.warn("dispatching changeFormUrlEvent");
                const event = new CustomEvent("changeFormUrlEvent", {detail: {formUrl: formUrl }});
                window.dispatchEvent(event);
                document.dispatchEvent(event);

                console.log('getting formURL ' + formUrl);



                axios__WEBPACK_IMPORTED_MODULE_1___default().get(formUrl)
                    .then( response => this.modalBodyTarget.innerHTML = response.data)
                    .catch( error => this.modalBodyTarget.innerHTML = error)
                ;
            }

        });
    }
    addRowClickListener(dt)
    {
        dt.on('click', 'tr td',  ($event) => {
            let el = $event.currentTarget;
            console.log($event, $event.currentTarget);
            var data = dt.row( $event.currentTarget ).data();
            var btn = el.querySelector('button');
            console.log(btn);
            let modalRoute = null;
            if (btn) {
                console.error(btn, btn.dataset, btn.dataset.modalRoute);
                modalRoute = btn.dataset.modalRoute;
            }


            if(el.querySelector("a")) {
                return; // skip links, let it bubble up to handle
            }

            if (modalRoute) {
                this.modalBodyTarget.innerHTML = data.code;
                this.modal = new (bootstrap_js_dist_modal__WEBPACK_IMPORTED_MODULE_12___default())(this.modalTarget);
                this.modal.show();
                console.assert(data.uniqueIdentifiers, "missing uniqueIdentifiers, add @Groups to entity")
                let formUrl = _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default().generate(modalRoute, data.uniqueIdentifiers);

                axios__WEBPACK_IMPORTED_MODULE_1___default()({
                    method: 'get', //you can set what request you want to be
                    url: formUrl,
                    // data: {id: varID},
                    headers: {
                        _page_content_only: '1' // could send blocks that we want??
                    }
                })
                    .then( response => this.modalBodyTarget.innerHTML = response.data)
                    .catch( error => this.modalBodyTarget.innerHTML = error)
                ;
            }
        } );
    }

    initDataTable(el)
    {
        let apiPlatformHeaders = {
            Accept: 'application/ld+json',
            'Content-Type': 'application/json'
        };

        let setup = {
        // let dt = new DataTable(el, {
            language: {
                searchPlaceholder: 'srch: ' + this.searchableFields.join(',')
            },
            createdRow: this.createdRow,
            // paging: true,
            scrollY: '70vh', // vh is percentage of viewport height, https://css-tricks.com/fun-viewport-units/
            // scrollY: true,
            // displayLength: 50, // not sure how to adjust the 'length' sent to the server
            // pageLength: 15,
            columnDefs: this.columnDefs,
            orderCellsTop: true,
            fixedHeader: true,

            deferRender:    true,
            // scrollX:        true,
            scrollCollapse: true,
            scroller: {
                // rowHeight: 90, // @WARNING: Problematic!!
                // displayBuffer: 10,
                loadingIndicator: true,
            },
            // "processing": true,
            serverSide: true,

            initComplete: (obj, data) => {
                this.handleTrans(el);
                // let xapi = new DataTable.Api(obj);
                // console.log(xapi);
                // console.log(xapi.table);

                // this.addRowClickListener(dt);
                this.addButtonClickListener(dt);
            },

            // dom: '<"js-dt-buttons"B><"js-dt-info"i>ft',
            dom: 'Q<"js-dt-buttons"B><"js-dt-info"i>' + (this.searchableFields.length ? 'f': '') +'t',
            buttons: [], // this.buttons,
            columns: this.cols(),
            searchBuilder: {
                columns: this.searchBuilderFields,
                depthLimit: 1
            },
            // columns:
            //     [
            //     this.c({
            //         propertyName: 'name',
            //     }),
            // ],
            ajax: (params, callback, settings) => {
                let apiParams = this.dataTableParamsToApiPlatformParams(params);
                // this.debug &&
                // console.error(params, apiParams);
                // console.log(`DataTables is requesting ${params.length} records starting at ${params.start}`, apiParams);

                Object.assign(apiParams, this.filter);
                axios__WEBPACK_IMPORTED_MODULE_1___default().get(this.apiCallValue, {
                    params: apiParams,
                    headers: apiPlatformHeaders
                })
                    .then( (response) =>
                    {
                        // handle success
                        let hydraData = response.data;

                        var total = hydraData.hasOwnProperty('hydra:totalItems') ? hydraData['hydra:totalItems'] : 999999; // Infinity;
                        var itemsReturned = hydraData['hydra:member'].length;
                        let first = (params.page-1) * params.itemsPerPage;
                        if (params.search.value) {
                            console.log(`dt search: ${params.search.value}`);
                        }

                        // console.log(`dt request: ${params.length} starting at ${params.start}`);

                        // let first = (apiOptions.page - 1) * apiOptions.itemsPerPage;
                        let d = hydraData['hydra:member'];
                        if (d.length) {
                            console.log(d[0]);
                        }
                        // if next page isn't working, make sure api_platform.yaml is correctly configured
                        // defaults:
                        //     pagination_client_items_per_page: true

                        // if there's a "next" page and we didn't get everything, fetch the next page and return the slice.
                        let next = hydraData["hydra:view"]['hydra:next'];
                        let callbackValues = {
                            draw: params.draw,
                            data: d,
                            recordsTotal: total,
                            recordsFiltered: total, //  itemsReturned,
                        }

                        if ( next && (params.start > 0) ) // && itemsReturned !== params.length
                        {

                            console.log('fetching second page ' + next);
                            axios__WEBPACK_IMPORTED_MODULE_1___default().get(next, {
                                headers: apiPlatformHeaders,
                            })
                                .then(response => response.data)
                                .then(json => {
                                    d = d.concat(json['hydra:member']);

                                    this.debug && console.log(d.map(obj => obj.id));
                                    if (this.debug && console && console.log) {
                                        console.log(`  ${itemsReturned} (of ${total}) returned, page ${apiOptions.page}, ${apiOptions.itemsPerPage}/page first: ${first} :`, d);
                                    }
                                    d = d.slice(params.start - first, (params.start - first) + params.length);
                                    callbackValues.data = d;

                                    itemsReturned = d.length;

                                    console.log(`2-page callback with ${total} records (${itemsReturned} items)`);
                                    console.log(d);
                                });
                        }
                        callback(callbackValues);
                    })
                    .catch(function (error) {
                        // handle error
                        console.error(error);
                    })
                ;

            },
        };
        let dt = new (datatables_net_bs5__WEBPACK_IMPORTED_MODULE_2___default())(el, setup);
        return dt;
    }

    get columnDefs() {
        return [
            // { targets: [0, 1], visible: true},
            { targets: '_all', visible: true, sortable: false,  "defaultContent": "~~" }
        ]
    }


    // get columns() {
    //     // if columns isn't overwritten, use the th's in the first tr?  or data-field='status', and then make the api call with _fields=...?
    //     // or https://datatables.net/examples/ajax/null_data_source.html
    //     return [
    //         {title: '@id', data: 'id'}
    //     ]
    // }

    actions({prefix = null, actions=['edit','show']} = {})
    {
        let icons = {edit: 'fas fa-edit', show: 'fas fa-eye text-success', 'delete': 'fas fa-trash text-danger'};
        let buttons = actions.map( action => {
            let modal_route = prefix + action;
            let icon = icons[action];
            // return action + ' ' + modal_route;
            // Routing.generate()

            return `<button data-modal-route="${modal_route}" class="btn btn-modal btn-action-${action}" 
title="${modal_route}"><span class="action-${action} fas fa-${icon}"></span></button>`;
        });

        // console.log(buttons);
        return {
            title: 'actions',
            render: () => {
                return buttons.join(' ');
            }
        }
        actions.forEach(action => {
        })

    }
    c({
          propertyName = null,
          name = null,
          route = null,
          modal_route = null,
          label =  null,
          modal = false,
          render = null,
          renderType = 'string'
      } = {}) {

        if (render === null) {
            render =   ( data, type, row, meta ) => {
                // if (!label) {
                //     // console.log(row, data);
                //     label = data || propertyName;
                // }
                let displayData = data;
                // @todo: move some twig templates to a common library
                if (renderType === 'image') {
                    return `<img class="img-thumbnail plant-thumb" alt="${data}" src="${data}" />`;
                }

                if (route) {
                    let url = _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_10___default().generate(route, row.uniqueIdentifiers);
                    if(modal) {
                        return `<button class="btn btn-primary"></button>`;
                    } else {
                        return `<a href="${url}">${displayData}</a>`;
                    }
                } else {
                    if (modal_route) {
                        return `<button data-modal-route="${modal_route}" class="btn btn-success">${modal_route}</button>`;
                    } else {
                        // console.log(propertyName, row[propertyName], row);
                        return row[propertyName];
                    }
                }

            }
        }

        return {
            title: label,
            data: propertyName || '',
            render: render,
            sortable: this.sortableFields.includes(propertyName)
        }
        // ...function body...
    }

    guessColumn(v)
    {

        let renderFunction = null;
        switch (v) {
            case 'id':
                renderFunction = ( data, type, row, meta ) => {
                    console.warn('id render');
                    return "<b>" + data + "!!</b>"
                }
                break;
            case 'newestPublishTime':
            case 'createTime':
                renderFunction = ( data, type, row, meta ) => {
                    let isoTime = data;
                    let str =  isoTime ? '<time class="timeago" datetime="' + data + '">' + data + '</time>' : '';
                    return str;
                }
                break;
            // default:
            //     renderFunction = ( data, type, row, meta ) => { return data; }


        }
        let obj = {
            title : v,
            data : v,
        }
        if (renderFunction) {
            obj.render = renderFunction;
        }
        console.warn(obj);
        return obj;
    }

    dataTableParamsToApiPlatformParams(params) {
        let columns = params.columns; // get the columns passed back to us, sanity.
        var apiData = {
            page: 1
        };

        if (params.length) {
            apiData.itemsPerPage = params.length;
        }

        // same as #[ApiFilter(MultiFieldSearchFilter::class, properties: ["label", "code"], arguments: ["searchParameterName"=>"search"])]
        if (params.search && params.search.value) {
            apiData['search'] = params.search.value;
        }

        let order = {};
        // https://jardin.wip/api/projects.jsonld?page=1&itemsPerPage=14&order[code]=asc
        params.order.forEach((o, index) => {
            let c = params.columns[o.column];
            if (c.data) {
                order[c.data] = o.dir;
                // apiData.order = order;
                apiData['order[' + c.data + ']'] = o.dir;
            }
            // console.error(c, order, o.column, o.dir);
        });
        if (params.searchBuilder && params.searchBuilder.criteria) {
            params.searchBuilder.criteria.forEach( (c, index) =>
            {
                console.warn(c);
                apiData[c.origData + '[]']=c.value1;
            });
        }
        params.columns.forEach(function(column, index) {
            if (column.search && column.search.value) {
                // console.error(column);
                let value = column.search.value;
                // check the first character for a range filter operator

                // data is the column field, at least for right now.
                apiData[column.data] = value;
            }
        });

        if (params.start) {
            // was apiData.page = Math.floor(params.start / params.length) + 1;
            apiData.page = Math.floor(params.start / apiData.itemsPerPage) + 1;
        }

        // add our own filters
        // apiData['marking'] = ['fetch_success'];

        return apiData;
    }

    initFooter(el) {
        return ;

        var footer = el.querySelector('tfoot');
        if (footer) {
            return; // do not initiate twice
        }

        var handleInput = function (column) {
            var input = $('<input class="form-control" type="text">');
            input.attr('placeholder', column.filter.placeholder || column.data );
            return input;
        };

        this.debug && console.log('adding footer');
        // var tr = $('<tr>');
        // var that = this;
        // console.log(this.columns());
        // Create an empty <tfoot> element and add it to the table:
        var footer = el.createTFoot();
        footer.classList.add('show-footer-above');

        var thead = el.querySelector('thead');
        el.insertBefore(footer, thead);

// Create an empty <tr> element and add it to the first position of <tfoot>:
        var row = footer.insertRow(0);


// Insert a new cell (<td>) at the first position of the "new" <tr> element:

// Add some bold text in the new cell:
//         cell.innerHTML = "<b>This is a table footer</b>";

        this.columns().forEach( (column, index) => {
                var cell = row.insertCell(index);

                // cell.innerHTML = column.data;

                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.setAttribute("placeholder", column.data);
                cell.appendChild(input);

                // if (column.filter === true || column.filter.type === 'input') {
                //         el = handleInput(column);
                //     } else if (column.filter.type === 'select') {
                //         el = handleSelect(column);
                //     }

                // var cell = row.insertCell(index);
                // var td = $('<td>');
                // if (column.filter !== undefined) {
                //     var el;
                //     if (column.filter === true || column.filter.type === 'input') {
                //         el = handleInput(column);
                //     } else if (column.filter.type === 'select') {
                //         el = handleSelect(column);
                //     }
                //     that.handleFieldSearch(this.el, el, index);
                //
                //     td.append(el);
            }
        );
        // footer = $('<tfoot>');
        // footer.append(tr);
        // console.log(footer);
        // this.el.append(footer);

        // see http://live.datatables.net/giharaka/1/edit for moving the footer to below the header
    }



});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfc3Vydm9zX2FwaS1ncmlkLWJ1bmRsZV9zcmNfY29udHJvbGxlcnNfYXBpX2dyaWRfY29udHJvbGxlcl9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM4Qzs7QUFFUDtBQUNLO0FBQ1Q7QUFDQTtBQUNuQztBQUNvQztBQUNDO0FBQ2lCO0FBQ0Q7QUFDQTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFZ0g7QUFDaEgsU0FBUyxtQkFBTyxDQUFDLG1GQUE2QztBQUM5RDtBQUNBO0FBQ0E7QUFDQSxrSUFBc0I7O0FBRVc7QUFDakMsNERBQVc7QUFDWDtBQUNBLGVBQWUsNEhBQWdCO0FBQy9CLEtBQUs7QUFDTCxDQUFDOzs7QUFHRCxXQUFXLE9BQU8sa0JBQWtCO0FBQ3BDO0FBQzRDO0FBQzVDOzs7QUFHQSxlQUFlLHFIQUFPO0FBQ3RCOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxjQUFjLDBEQUFVO0FBQ3ZDO0FBQ0E7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDLDhCQUE4Qiw0QkFBNEI7QUFDMUQseUJBQXlCLDRCQUE0QjtBQUNyRCwyQkFBMkIsNEJBQTRCO0FBQ3ZELDhCQUE4Qiw0QkFBNEI7QUFDMUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwwREFBUztBQUN4QztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDRDQUE0Qyx5Q0FBeUM7QUFDckY7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxxQ0FBcUM7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZELDZCQUE2QjtBQUMxRjs7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QSxtRUFBbUU7OztBQUduRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7QUFJQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzdXJ2b3MvYXBpLWdyaWQtYnVuZGxlL3NyYy9jb250cm9sbGVycy9hcGlfZ3JpZF9jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGR1cmluZyBkZXYsIGZyb20gcHJvamVjdF9kaXIgcnVuXG4vLyBsbiAtcyB+L3N1cnZvcy9idW5kbGVzL2FwaS1ncmlkLWJ1bmRsZS9hc3NldHMvc3JjL2NvbnRyb2xsZXJzL3NhbmRib3hfYXBpX2NvbnRyb2xsZXIuanMgYXNzZXRzL2NvbnRyb2xsZXJzL3NhbmRib3hfYXBpX2NvbnRyb2xsZXIuanNcbmltcG9ydCB7Q29udHJvbGxlcn0gZnJvbSBcIkBob3R3aXJlZC9zdGltdWx1c1wiO1xuXG5pbXBvcnQge2RlZmF1bHQgYXMgYXhpb3N9IGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IERhdGFUYWJsZXMgZnJvbSBcImRhdGF0YWJsZXMubmV0LWJzNVwiO1xuaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1zZWxlY3QtYnM1JztcbmltcG9ydCAnZGF0YXRhYmxlcy5uZXQtcmVzcG9uc2l2ZSc7XG4vLyBpbXBvcnQgJ2RhdGF0YWJsZXMubmV0LXJlc3BvbnNpdmUtYnM1JztcbmltcG9ydCAnZGF0YXRhYmxlcy5uZXQtYnV0dG9ucy1iczUnO1xuaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1zY3JvbGxlci1iczUnO1xuaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1idXR0b25zL2pzL2J1dHRvbnMuY29sVmlzLm1pbic7XG5pbXBvcnQgJ2RhdGF0YWJsZXMubmV0LWJ1dHRvbnMvanMvYnV0dG9ucy5odG1sNS5taW4nO1xuaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1idXR0b25zL2pzL2J1dHRvbnMucHJpbnQubWluJztcblxuLy8gc2hvdWxkbid0IHRoZXNlIGJlIGF1dG9tYXRpY2FsbHkgaW5jbHVkZWQgKGZyb20gcGFja2FnZS5qc29uKVxuLy8gaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1zY3JvbGxlcic7XG4vLyBpbXBvcnQgJ2RhdGF0YWJsZXMubmV0LXNjcm9sbGVyLWJzNSc7XG4vLyBpbXBvcnQgJ2RhdGF0YWJsZXMubmV0LWRhdGV0aW1lJztcbi8vIGltcG9ydCAnZGF0YXRhYmxlcy5uZXQtc2VhcmNoYnVpbGRlci1iczUnO1xuLy8gaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1maXhlZGhlYWRlci1iczUnO1xuLy8gaW1wb3J0ICdkYXRhdGFibGVzLm5ldC1yZXNwb25zaXZlLWJzNSc7XG4vLyBjb25zdCBEYXRhVGFibGUgPSByZXF1aXJlKCdkYXRhdGFibGVzLm5ldCcpO1xuLy8gaW1wb3J0KCdkYXRhdGFibGVzLm5ldC1idXR0b25zLWJzNScpO1xuXG4vLyBpbXBvcnQoJ2RhdGF0YWJsZXMubmV0LWJzNScpO1xuLy8gaW1wb3J0KCdkYXRhdGFibGVzLm5ldC1zZWxlY3QtYnM1Jyk7XG5cbi8vIGlmIGNvbXBvbmVudFxubGV0IHJvdXRlcyA9IGZhbHNlO1xuXG5pbXBvcnQgUm91dGluZyBmcm9tICcuLi8uLi8uLi8uLi8uLi92ZW5kb3IvZnJpZW5kc29mc3ltZm9ueS9qc3JvdXRpbmctYnVuZGxlL1Jlc291cmNlcy9wdWJsaWMvanMvcm91dGVyLm1pbi5qcyc7XG5yb3V0ZXMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9wdWJsaWMvanMvZm9zX2pzX3JvdXRlcy5qc29uJyk7XG4vLyBpZiBhIGxvY2FsIHRlc3QuXG4vLyByb3V0ZXMgPSByZXF1aXJlKCcuLi8uLi9wdWJsaWMvanMvZm9zX2pzX3JvdXRlcy5qc29uJyk7XG4vLyBpbXBvcnQgUm91dGluZyBmcm9tICcuLi8uLi92ZW5kb3IvZnJpZW5kc29mc3ltZm9ueS9qc3JvdXRpbmctYnVuZGxlL1Jlc291cmNlcy9wdWJsaWMvanMvcm91dGVyLm1pbi5qcyc7XG5Sb3V0aW5nLnNldFJvdXRpbmdEYXRhKHJvdXRlcyk7XG5cbmltcG9ydCBUd2lnIGZyb20gJ3R3aWcvdHdpZy5taW4nO1xuVHdpZy5leHRlbmQoZnVuY3Rpb24gKFR3aWcpIHtcbiAgICBUd2lnLl9mdW5jdGlvbi5leHRlbmQoJ3BhdGgnLCAocm91dGUsIHJvdXRlUGFyYW1zKSA9PiB7XG4gICAgICAgIHJldHVybiBSb3V0aW5nLmdlbmVyYXRlKHJvdXRlLCByb3V0ZVBhcmFtcyk7XG4gICAgfSk7XG59KTtcblxuXG4vLyBpbXBvcnQge01vZGFsfSBmcm9tIFwiYm9vdHN0cmFwXCI7ICEhXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82ODA4NDc0Mi9kcm9wZG93bi1kb2VzbnQtd29yay1hZnRlci1tb2RhbC1vZi1ib290c3RyYXAtaW1wb3J0ZWRcbmltcG9ydCBNb2RhbCBmcm9tICdib290c3RyYXAvanMvZGlzdC9tb2RhbCc7XG4vLyBpbXBvcnQgY2IgZnJvbSBcIi4uL2pzL2FwcC1idXR0b25zXCI7XG5cblxuY29uc29sZS5hc3NlcnQoUm91dGluZywgJ1JvdXRpbmcgaXMgbm90IGRlZmluZWQnKTtcbi8vIGdsb2JhbC5Sb3V0aW5nID0gUm91dGluZztcblxuLy8gdHJ5IHtcbi8vIH0gY2F0Y2ggKGUpIHtcbi8vICAgICBjb25zb2xlLmVycm9yKGUpO1xuLy8gICAgIGNvbnNvbGUud2FybihcIkZPUyBKUyBSb3V0aW5nIG5vdCBsb2FkZWQsIHNvIHBhdGgoKSB3b24ndCB3b3JrXCIpO1xuLy8gfVxuXG5jb25zdCBjb250ZW50VHlwZXMgPSB7XG4gICAgJ1BBVENIJzogJ2FwcGxpY2F0aW9uL21lcmdlLXBhdGNoK2pzb24nLFxuICAgICdQT1NUJzogJ2FwcGxpY2F0aW9uL2pzb24nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyB0YXJnZXRzID0gWyd0YWJsZScsICdtb2RhbCcsICdtb2RhbEJvZHknLCAnZmllbGRTZWFyY2gnLCAnbWVzc2FnZSddO1xuICAgIHN0YXRpYyB2YWx1ZXMgPSB7XG4gICAgICAgIGFwaUNhbGw6IHt0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnfSxcbiAgICAgICAgY29sdW1uQ29uZmlndXJhdGlvbjoge3R5cGU6IFN0cmluZywgZGVmYXVsdDogJ1tdJ30sXG4gICAgICAgIHNvcnRhYmxlRmllbGRzOiB7dHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnW10nfSxcbiAgICAgICAgc2VhcmNoYWJsZUZpZWxkczoge3R5cGU6IFN0cmluZywgZGVmYXVsdDogJ1tdJ30sXG4gICAgICAgIHNlYXJjaEJ1aWxkZXJGaWVsZHM6IHt0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICdbXSd9LFxuICAgICAgICBmaWx0ZXI6IFN0cmluZ1xuICAgIH1cblxuICAgIGNvbHMoKSB7XG4gICAgICAgIGxldCB4ID0gdGhpcy5jb2x1bW5zLm1hcCggIGMgPT4ge1xuICAgICAgICAgICAgbGV0IHJlbmRlciA9IG51bGw7XG4gICAgICAgICAgICBpZiAoYy50d2lnVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBUd2lnLnR3aWcoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjLnR3aWdUZW1wbGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlbmRlciA9ICggZGF0YSwgdHlwZSwgcm93LCBtZXRhICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVuZGVyKHtkYXRhOiBkYXRhLCByb3c6IHJvdywgZmllbGRfbmFtZTogYy5uYW1lfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjLm5hbWUgPT09ICdfYWN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25zKHtwcmVmaXg6IGMucHJlZml4LCBhY3Rpb25zOiBjLmFjdGlvbnN9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jKHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IGMubmFtZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBjLm5hbWUsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGMudGl0bGUsXG4gICAgICAgICAgICAgICAgcm91dGU6IGMucm91dGUsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiByZW5kZXJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geDtcblxuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChcImNoYW5nZUZvcm1VcmxFdmVudFwiLCB7Zm9ybVVybDogJ3Rlc3RpbmcgZm9ybVVSTCEnIH0pO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cblxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBKU09OLnBhcnNlKHRoaXMuY29sdW1uQ29uZmlndXJhdGlvblZhbHVlKTtcbiAgICAgICAgLy8gXCJjb21waWxlXCIgdGhlIGN1c3RvbSB0d2lnIGJsb2Nrc1xuICAgICAgICAvLyB2YXIgY29sdW1uUmVuZGVyID0gW107XG5cbiAgICAgICAgdGhpcy5maWx0ZXIgPSBKU09OLnBhcnNlKHRoaXMuZmlsdGVyVmFsdWV8fCdbXScpXG4gICAgICAgIHRoaXMuc29ydGFibGVGaWVsZHMgPSBKU09OLnBhcnNlKHRoaXMuc29ydGFibGVGaWVsZHNWYWx1ZSk7XG4gICAgICAgIHRoaXMuc2VhcmNoYWJsZUZpZWxkcyA9IEpTT04ucGFyc2UodGhpcy5zZWFyY2hhYmxlRmllbGRzVmFsdWUpO1xuICAgICAgICB0aGlzLnNlYXJjaEJ1aWxkZXJGaWVsZHMgPSBKU09OLnBhcnNlKHRoaXMuc2VhcmNoQnVpbGRlckZpZWxkc1ZhbHVlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2hpIGZyb20gJyArIHRoaXMuaWRlbnRpZmllcik7XG4gICAgICAgIHN1cGVyLmNvbm5lY3QoKTsgLy9cblxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmhhc1RhYmxlVGFyZ2V0ID8gJ3RhYmxlIHRhcmdldCBleGlzdHMnIDogJ21pc3NpbmcgdGFibGUgdGFyZ2V0JylcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5oYXNNb2RhbFRhcmdldCA/ICd0YXJnZXQgZXhpc3RzJyA6ICdtaXNzaW5nIG1vZGFsc3RhcmdldCcpXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKHRoaXMuZmllbGRTZWFyY2ggPyAndGFyZ2V0IGV4aXN0cycgOiAnbWlzc2luZyBmaWVsZFNlYXJjaCcpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc29ydGFibGVGaWVsZHNWYWx1ZSk7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXMuaGFzTW9kYWxUYXJnZXQsIFwiTWlzc2luZyBtb2RhbCB0YXJnZXRcIik7XG4gICAgICAgIHRoaXMudGhhdCA9IHRoaXM7XG4gICAgICAgIHRoaXMudGFibGVFbGVtZW50ID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc1RhYmxlVGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlRWxlbWVudCA9IHRoaXMudGFibGVUYXJnZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgPT09ICdUQUJMRScpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVFbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YWJsZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKVswXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoJ0EgdGFibGUgZWxlbWVudCBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBpZiAodGhpcy50YWJsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZHQgPSB0aGlzLmluaXREYXRhVGFibGUodGhpcy50YWJsZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG9wZW5Nb2RhbChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ3lheSwgb3BlbiBtb2RhbCEnLCBlLCBlLmN1cnJlbnRUYXJnZXQsIGUuY3VycmVudFRhcmdldC5kYXRhc2V0KTtcblxuICAgICAgICB0aGlzLm1vZGFsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3cuYnMubW9kYWwnLCAgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIGUucmVsYXRlZFRhcmdldCwgZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGRvIHNvbWV0aGluZy4uLlxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKHRoaXMubW9kYWxUYXJnZXQpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1vZGFsKTtcbiAgICAgICAgdGhpcy5tb2RhbC5zaG93KCk7XG5cbiAgICB9XG5cbiAgICBjcmVhdGVkUm93KCByb3csIGRhdGEsIGRhdGFJbmRleCApXG4gICAge1xuICAgICAgICAvLyB3ZSBjb3VsZCBhZGQgdGhlIHRodW1ibmFpbCBVUkwgaGVyZS5cbiAgICAgICAgLy8gY29uc29sZS5sb2cocm93LCBkYXRhLCBkYXRhSW5kZXgsIHRoaXMuaWRlbnRpZmllcik7XG4gICAgICAgIC8vIGxldCBhYUNvbnRyb2xsZXIgPSAncHJvamVjdHMnO1xuICAgICAgICAvLyByb3cuY2xhc3NMaXN0LmFkZChcInRleHQtZGFuZ2VyXCIpO1xuICAgICAgICAvLyByb3cuc2V0QXR0cmlidXRlKCdkYXRhLWFjdGlvbicsIGFhQ29udHJvbGxlciArICcjb3Blbk1vZGFsJyk7XG4gICAgICAgIC8vIHJvdy5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29udHJvbGxlcicsICdtb2RhbC1mb3JtJywge2Zvcm1Vcmw6ICd0ZXN0J30pO1xuICAgIH1cblxuICAgIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUYXJnZXQuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICB9XG5cblxuXG4gICAgaGFuZGxlVHJhbnMoZWwpXG4gICAge1xuICAgICAgICBsZXQgdHJhbnNpdGlvbkJ1dHRvbnMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24udHJhbnNpdGlvbicpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0cmFuc2l0aW9uQnV0dG9ucyk7XG4gICAgICAgIHRyYW5zaXRpb25CdXR0b25zLmZvckVhY2goIGJ0biA9PiBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzQnV0dG9uID0gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSAnQlVUVE9OJztcbiAgICAgICAgICAgIGlmICghaXNCdXR0b24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCwgZXZlbnQudGFyZ2V0LCBldmVudC5jdXJyZW50VGFyZ2V0KTtcblxuICAgICAgICAgICAgbGV0IHJvdyAgPSB0aGlzLmR0LnJvdyggZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ3RyJykgKTtcbiAgICAgICAgICAgIGxldCAgZGF0YSA9IHJvdy5kYXRhKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyb3csIGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ2RlbGV0aW5nICcgKyBkYXRhLmlkKTtcblxuICAgICAgICAgICAgLy8gY29uc29sZS5kaXIoZXZlbnQudGFyZ2V0LmlkKTtcbiAgICAgICAgfSkpO1xuXG4gICAgfVxuXG4gICAgcmVxdWVzdFRyYW5zaXRpb24ocm91dGUsIGVudGl0eUNsYXNzLCBpZCkge1xuXG4gICAgfVxuXG4gICAgLy8gZWguLi4gbm90IHdvcmtpbmdcbiAgICBnZXQgbW9kYWxDb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbi5nZXRDb250cm9sbGVyRm9yRWxlbWVudEFuZElkZW50aWZpZXIodGhpcy5tb2RhbFRhcmdldCwgXCJtb2RhbF9mb3JtXCIpXG4gICAgfVxuXG4gICAgYWRkQnV0dG9uQ2xpY2tMaXN0ZW5lcihkdClcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTGlzdGVuaW5nIGZvciBidXR0b24udHJhbnNpdGlvbiBhbmQgYnV0dG9uIC5idG4tbW9kYWwgY2xpY2tzIGV2ZW50c1wiKTtcblxuICAgICAgICBkdC5vbignY2xpY2snLCAndHIgdGQgYnV0dG9uLnRyYW5zaXRpb24nLCAgKCRldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9ICRldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBkdC5yb3coIHRhcmdldC5jbG9zZXN0KCd0cicpICkuZGF0YSgpO1xuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb24gPSB0YXJnZXQuZGF0YXNldFsndCddO1xuICAgICAgICAgICAgY29uc29sZS5sb2codHJhbnNpdGlvbiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEsICRldmVudCk7XG4gICAgICAgICAgICB0aGlzLnRoYXQubW9kYWxCb2R5VGFyZ2V0LmlubmVySFRNTCA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKHRoaXMubW9kYWxUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5tb2RhbC5zaG93KCk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZHQub24oJ2NsaWNrJywgJ3RyIHRkIGJ1dHRvbiAuYnRuLW1vZGFsJywgICgkZXZlbnQsIHgpID0+IHtcbiAgICAgICAgZHQub24oJ2NsaWNrJywgJ3RyIHRkIGJ1dHRvbiAnLCAgKCRldmVudCwgeCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJGV2ZW50LCAkZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGR0LnJvdyggJGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgndHInKSApLmRhdGEoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEsICRldmVudCwgeCk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJkaXNwYXRjaGluZyBjaGFuZ2VGb3JtVXJsRXZlbnRcIik7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChcImNoYW5nZUZvcm1VcmxFdmVudFwiLCB7Zm9ybVVybDogJ3Rlc3QnIH0pO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG5cbiAgICAgICAgICAgIGxldCBidG4gPSAkZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIGxldCBtb2RhbFJvdXRlID0gYnRuLmRhdGFzZXQubW9kYWxSb3V0ZTtcbiAgICAgICAgICAgIGlmIChtb2RhbFJvdXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbEJvZHlUYXJnZXQuaW5uZXJIVE1MID0gZGF0YS5jb2RlO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kYWwgPSBuZXcgTW9kYWwodGhpcy5tb2RhbFRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoZGF0YS51bmlxdWVJZGVudGlmaWVycywgXCJtaXNzaW5nIHVuaXF1ZUlkZW50aWZpZXJzLCBhZGQgQEdyb3VwcyB0byBlbnRpdHlcIilcbiAgICAgICAgICAgICAgICBsZXQgZm9ybVVybCA9IFJvdXRpbmcuZ2VuZXJhdGUobW9kYWxSb3V0ZSwgey4uLmRhdGEudW5pcXVlSWRlbnRpZmllcnMsIF9wYWdlX2NvbnRlbnRfb25seTogMX0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImRpc3BhdGNoaW5nIGNoYW5nZUZvcm1VcmxFdmVudFwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChcImNoYW5nZUZvcm1VcmxFdmVudFwiLCB7ZGV0YWlsOiB7Zm9ybVVybDogZm9ybVVybCB9fSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldHRpbmcgZm9ybVVSTCAnICsgZm9ybVVybCk7XG5cblxuXG4gICAgICAgICAgICAgICAgYXhpb3MuZ2V0KGZvcm1VcmwpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB0aGlzLm1vZGFsQm9keVRhcmdldC5pbm5lckhUTUwgPSByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIGVycm9yID0+IHRoaXMubW9kYWxCb2R5VGFyZ2V0LmlubmVySFRNTCA9IGVycm9yKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkUm93Q2xpY2tMaXN0ZW5lcihkdClcbiAgICB7XG4gICAgICAgIGR0Lm9uKCdjbGljaycsICd0ciB0ZCcsICAoJGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZWwgPSAkZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRldmVudCwgJGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBkdC5yb3coICRldmVudC5jdXJyZW50VGFyZ2V0ICkuZGF0YSgpO1xuICAgICAgICAgICAgdmFyIGJ0biA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYnRuKTtcbiAgICAgICAgICAgIGxldCBtb2RhbFJvdXRlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChidG4pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGJ0biwgYnRuLmRhdGFzZXQsIGJ0bi5kYXRhc2V0Lm1vZGFsUm91dGUpO1xuICAgICAgICAgICAgICAgIG1vZGFsUm91dGUgPSBidG4uZGF0YXNldC5tb2RhbFJvdXRlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmKGVsLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBza2lwIGxpbmtzLCBsZXQgaXQgYnViYmxlIHVwIHRvIGhhbmRsZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kYWxSb3V0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxCb2R5VGFyZ2V0LmlubmVySFRNTCA9IGRhdGEuY29kZTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKHRoaXMubW9kYWxUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kYWwuc2hvdygpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KGRhdGEudW5pcXVlSWRlbnRpZmllcnMsIFwibWlzc2luZyB1bmlxdWVJZGVudGlmaWVycywgYWRkIEBHcm91cHMgdG8gZW50aXR5XCIpXG4gICAgICAgICAgICAgICAgbGV0IGZvcm1VcmwgPSBSb3V0aW5nLmdlbmVyYXRlKG1vZGFsUm91dGUsIGRhdGEudW5pcXVlSWRlbnRpZmllcnMpO1xuXG4gICAgICAgICAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLCAvL3lvdSBjYW4gc2V0IHdoYXQgcmVxdWVzdCB5b3Ugd2FudCB0byBiZVxuICAgICAgICAgICAgICAgICAgICB1cmw6IGZvcm1VcmwsXG4gICAgICAgICAgICAgICAgICAgIC8vIGRhdGE6IHtpZDogdmFySUR9LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGFnZV9jb250ZW50X29ubHk6ICcxJyAvLyBjb3VsZCBzZW5kIGJsb2NrcyB0aGF0IHdlIHdhbnQ/P1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHRoaXMubW9kYWxCb2R5VGFyZ2V0LmlubmVySFRNTCA9IHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCggZXJyb3IgPT4gdGhpcy5tb2RhbEJvZHlUYXJnZXQuaW5uZXJIVE1MID0gZXJyb3IpXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICk7XG4gICAgfVxuXG4gICAgaW5pdERhdGFUYWJsZShlbClcbiAgICB7XG4gICAgICAgIGxldCBhcGlQbGF0Zm9ybUhlYWRlcnMgPSB7XG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9sZCtqc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgc2V0dXAgPSB7XG4gICAgICAgIC8vIGxldCBkdCA9IG5ldyBEYXRhVGFibGUoZWwsIHtcbiAgICAgICAgICAgIGxhbmd1YWdlOiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdzcmNoOiAnICsgdGhpcy5zZWFyY2hhYmxlRmllbGRzLmpvaW4oJywnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZWRSb3c6IHRoaXMuY3JlYXRlZFJvdyxcbiAgICAgICAgICAgIC8vIHBhZ2luZzogdHJ1ZSxcbiAgICAgICAgICAgIHNjcm9sbFk6ICc3MHZoJywgLy8gdmggaXMgcGVyY2VudGFnZSBvZiB2aWV3cG9ydCBoZWlnaHQsIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZnVuLXZpZXdwb3J0LXVuaXRzL1xuICAgICAgICAgICAgLy8gc2Nyb2xsWTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGRpc3BsYXlMZW5ndGg6IDUwLCAvLyBub3Qgc3VyZSBob3cgdG8gYWRqdXN0IHRoZSAnbGVuZ3RoJyBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8vIHBhZ2VMZW5ndGg6IDE1LFxuICAgICAgICAgICAgY29sdW1uRGVmczogdGhpcy5jb2x1bW5EZWZzLFxuICAgICAgICAgICAgb3JkZXJDZWxsc1RvcDogdHJ1ZSxcbiAgICAgICAgICAgIGZpeGVkSGVhZGVyOiB0cnVlLFxuXG4gICAgICAgICAgICBkZWZlclJlbmRlcjogICAgdHJ1ZSxcbiAgICAgICAgICAgIC8vIHNjcm9sbFg6ICAgICAgICB0cnVlLFxuICAgICAgICAgICAgc2Nyb2xsQ29sbGFwc2U6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGxlcjoge1xuICAgICAgICAgICAgICAgIC8vIHJvd0hlaWdodDogOTAsIC8vIEBXQVJOSU5HOiBQcm9ibGVtYXRpYyEhXG4gICAgICAgICAgICAgICAgLy8gZGlzcGxheUJ1ZmZlcjogMTAsXG4gICAgICAgICAgICAgICAgbG9hZGluZ0luZGljYXRvcjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBcInByb2Nlc3NpbmdcIjogdHJ1ZSxcbiAgICAgICAgICAgIHNlcnZlclNpZGU6IHRydWUsXG5cbiAgICAgICAgICAgIGluaXRDb21wbGV0ZTogKG9iaiwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhbnMoZWwpO1xuICAgICAgICAgICAgICAgIC8vIGxldCB4YXBpID0gbmV3IERhdGFUYWJsZS5BcGkob2JqKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4YXBpKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4YXBpLnRhYmxlKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoaXMuYWRkUm93Q2xpY2tMaXN0ZW5lcihkdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRCdXR0b25DbGlja0xpc3RlbmVyKGR0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIGRvbTogJzxcImpzLWR0LWJ1dHRvbnNcIkI+PFwianMtZHQtaW5mb1wiaT5mdCcsXG4gICAgICAgICAgICBkb206ICdRPFwianMtZHQtYnV0dG9uc1wiQj48XCJqcy1kdC1pbmZvXCJpPicgKyAodGhpcy5zZWFyY2hhYmxlRmllbGRzLmxlbmd0aCA/ICdmJzogJycpICsndCcsXG4gICAgICAgICAgICBidXR0b25zOiBbXSwgLy8gdGhpcy5idXR0b25zLFxuICAgICAgICAgICAgY29sdW1uczogdGhpcy5jb2xzKCksXG4gICAgICAgICAgICBzZWFyY2hCdWlsZGVyOiB7XG4gICAgICAgICAgICAgICAgY29sdW1uczogdGhpcy5zZWFyY2hCdWlsZGVyRmllbGRzLFxuICAgICAgICAgICAgICAgIGRlcHRoTGltaXQ6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBjb2x1bW5zOlxuICAgICAgICAgICAgLy8gICAgIFtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmMoe1xuICAgICAgICAgICAgLy8gICAgICAgICBwcm9wZXJ0eU5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgICAgIC8vIF0sXG4gICAgICAgICAgICBhamF4OiAocGFyYW1zLCBjYWxsYmFjaywgc2V0dGluZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYXBpUGFyYW1zID0gdGhpcy5kYXRhVGFibGVQYXJhbXNUb0FwaVBsYXRmb3JtUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5kZWJ1ZyAmJlxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IocGFyYW1zLCBhcGlQYXJhbXMpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBEYXRhVGFibGVzIGlzIHJlcXVlc3RpbmcgJHtwYXJhbXMubGVuZ3RofSByZWNvcmRzIHN0YXJ0aW5nIGF0ICR7cGFyYW1zLnN0YXJ0fWAsIGFwaVBhcmFtcyk7XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFwaVBhcmFtcywgdGhpcy5maWx0ZXIpO1xuICAgICAgICAgICAgICAgIGF4aW9zLmdldCh0aGlzLmFwaUNhbGxWYWx1ZSwge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGFwaVBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogYXBpUGxhdGZvcm1IZWFkZXJzXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oIChyZXNwb25zZSkgPT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoeWRyYURhdGEgPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBoeWRyYURhdGEuaGFzT3duUHJvcGVydHkoJ2h5ZHJhOnRvdGFsSXRlbXMnKSA/IGh5ZHJhRGF0YVsnaHlkcmE6dG90YWxJdGVtcyddIDogOTk5OTk5OyAvLyBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtc1JldHVybmVkID0gaHlkcmFEYXRhWydoeWRyYTptZW1iZXInXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSAocGFyYW1zLnBhZ2UtMSkgKiBwYXJhbXMuaXRlbXNQZXJQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zZWFyY2gudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgZHQgc2VhcmNoOiAke3BhcmFtcy5zZWFyY2gudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBkdCByZXF1ZXN0OiAke3BhcmFtcy5sZW5ndGh9IHN0YXJ0aW5nIGF0ICR7cGFyYW1zLnN0YXJ0fWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgZmlyc3QgPSAoYXBpT3B0aW9ucy5wYWdlIC0gMSkgKiBhcGlPcHRpb25zLml0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gaHlkcmFEYXRhWydoeWRyYTptZW1iZXInXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbmV4dCBwYWdlIGlzbid0IHdvcmtpbmcsIG1ha2Ugc3VyZSBhcGlfcGxhdGZvcm0ueWFtbCBpcyBjb3JyZWN0bHkgY29uZmlndXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdHM6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgcGFnaW5hdGlvbl9jbGllbnRfaXRlbXNfcGVyX3BhZ2U6IHRydWVcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIFwibmV4dFwiIHBhZ2UgYW5kIHdlIGRpZG4ndCBnZXQgZXZlcnl0aGluZywgZmV0Y2ggdGhlIG5leHQgcGFnZSBhbmQgcmV0dXJuIHRoZSBzbGljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaHlkcmFEYXRhW1wiaHlkcmE6dmlld1wiXVsnaHlkcmE6bmV4dCddO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhbGxiYWNrVmFsdWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXc6IHBhcmFtcy5kcmF3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3Jkc1RvdGFsOiB0b3RhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRzRmlsdGVyZWQ6IHRvdGFsLCAvLyAgaXRlbXNSZXR1cm5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBuZXh0ICYmIChwYXJhbXMuc3RhcnQgPiAwKSApIC8vICYmIGl0ZW1zUmV0dXJuZWQgIT09IHBhcmFtcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmZXRjaGluZyBzZWNvbmQgcGFnZSAnICsgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXhpb3MuZ2V0KG5leHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogYXBpUGxhdGZvcm1IZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGpzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGQuY29uY2F0KGpzb25bJ2h5ZHJhOm1lbWJlciddKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhkLm1hcChvYmogPT4gb2JqLmlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZyAmJiBjb25zb2xlICYmIGNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgJHtpdGVtc1JldHVybmVkfSAob2YgJHt0b3RhbH0pIHJldHVybmVkLCBwYWdlICR7YXBpT3B0aW9ucy5wYWdlfSwgJHthcGlPcHRpb25zLml0ZW1zUGVyUGFnZX0vcGFnZSBmaXJzdDogJHtmaXJzdH0gOmAsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGQuc2xpY2UocGFyYW1zLnN0YXJ0IC0gZmlyc3QsIChwYXJhbXMuc3RhcnQgLSBmaXJzdCkgKyBwYXJhbXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrVmFsdWVzLmRhdGEgPSBkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1JldHVybmVkID0gZC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAyLXBhZ2UgY2FsbGJhY2sgd2l0aCAke3RvdGFsfSByZWNvcmRzICgke2l0ZW1zUmV0dXJuZWR9IGl0ZW1zKWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY2FsbGJhY2tWYWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGR0ID0gbmV3IERhdGFUYWJsZXMoZWwsIHNldHVwKTtcbiAgICAgICAgcmV0dXJuIGR0O1xuICAgIH1cblxuICAgIGdldCBjb2x1bW5EZWZzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLy8geyB0YXJnZXRzOiBbMCwgMV0sIHZpc2libGU6IHRydWV9LFxuICAgICAgICAgICAgeyB0YXJnZXRzOiAnX2FsbCcsIHZpc2libGU6IHRydWUsIHNvcnRhYmxlOiBmYWxzZSwgIFwiZGVmYXVsdENvbnRlbnRcIjogXCJ+flwiIH1cbiAgICAgICAgXVxuICAgIH1cblxuXG4gICAgLy8gZ2V0IGNvbHVtbnMoKSB7XG4gICAgLy8gICAgIC8vIGlmIGNvbHVtbnMgaXNuJ3Qgb3ZlcndyaXR0ZW4sIHVzZSB0aGUgdGgncyBpbiB0aGUgZmlyc3QgdHI/ICBvciBkYXRhLWZpZWxkPSdzdGF0dXMnLCBhbmQgdGhlbiBtYWtlIHRoZSBhcGkgY2FsbCB3aXRoIF9maWVsZHM9Li4uP1xuICAgIC8vICAgICAvLyBvciBodHRwczovL2RhdGF0YWJsZXMubmV0L2V4YW1wbGVzL2FqYXgvbnVsbF9kYXRhX3NvdXJjZS5odG1sXG4gICAgLy8gICAgIHJldHVybiBbXG4gICAgLy8gICAgICAgICB7dGl0bGU6ICdAaWQnLCBkYXRhOiAnaWQnfVxuICAgIC8vICAgICBdXG4gICAgLy8gfVxuXG4gICAgYWN0aW9ucyh7cHJlZml4ID0gbnVsbCwgYWN0aW9ucz1bJ2VkaXQnLCdzaG93J119ID0ge30pXG4gICAge1xuICAgICAgICBsZXQgaWNvbnMgPSB7ZWRpdDogJ2ZhcyBmYS1lZGl0Jywgc2hvdzogJ2ZhcyBmYS1leWUgdGV4dC1zdWNjZXNzJywgJ2RlbGV0ZSc6ICdmYXMgZmEtdHJhc2ggdGV4dC1kYW5nZXInfTtcbiAgICAgICAgbGV0IGJ1dHRvbnMgPSBhY3Rpb25zLm1hcCggYWN0aW9uID0+IHtcbiAgICAgICAgICAgIGxldCBtb2RhbF9yb3V0ZSA9IHByZWZpeCArIGFjdGlvbjtcbiAgICAgICAgICAgIGxldCBpY29uID0gaWNvbnNbYWN0aW9uXTtcbiAgICAgICAgICAgIC8vIHJldHVybiBhY3Rpb24gKyAnICcgKyBtb2RhbF9yb3V0ZTtcbiAgICAgICAgICAgIC8vIFJvdXRpbmcuZ2VuZXJhdGUoKVxuXG4gICAgICAgICAgICByZXR1cm4gYDxidXR0b24gZGF0YS1tb2RhbC1yb3V0ZT1cIiR7bW9kYWxfcm91dGV9XCIgY2xhc3M9XCJidG4gYnRuLW1vZGFsIGJ0bi1hY3Rpb24tJHthY3Rpb259XCIgXG50aXRsZT1cIiR7bW9kYWxfcm91dGV9XCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tJHthY3Rpb259IGZhcyBmYS0ke2ljb259XCI+PC9zcGFuPjwvYnV0dG9uPmA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbnMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6ICdhY3Rpb25zJyxcbiAgICAgICAgICAgIHJlbmRlcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25zLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBjKHtcbiAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBudWxsLFxuICAgICAgICAgIG5hbWUgPSBudWxsLFxuICAgICAgICAgIHJvdXRlID0gbnVsbCxcbiAgICAgICAgICBtb2RhbF9yb3V0ZSA9IG51bGwsXG4gICAgICAgICAgbGFiZWwgPSAgbnVsbCxcbiAgICAgICAgICBtb2RhbCA9IGZhbHNlLFxuICAgICAgICAgIHJlbmRlciA9IG51bGwsXG4gICAgICAgICAgcmVuZGVyVHlwZSA9ICdzdHJpbmcnXG4gICAgICB9ID0ge30pIHtcblxuICAgICAgICBpZiAocmVuZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZW5kZXIgPSAgICggZGF0YSwgdHlwZSwgcm93LCBtZXRhICkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGlmICghbGFiZWwpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2cocm93LCBkYXRhKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgbGFiZWwgPSBkYXRhIHx8IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAvLyBAdG9kbzogbW92ZSBzb21lIHR3aWcgdGVtcGxhdGVzIHRvIGEgY29tbW9uIGxpYnJhcnlcbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyVHlwZSA9PT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxpbWcgY2xhc3M9XCJpbWctdGh1bWJuYWlsIHBsYW50LXRodW1iXCIgYWx0PVwiJHtkYXRhfVwiIHNyYz1cIiR7ZGF0YX1cIiAvPmA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBSb3V0aW5nLmdlbmVyYXRlKHJvdXRlLCByb3cudW5pcXVlSWRlbnRpZmllcnMpO1xuICAgICAgICAgICAgICAgICAgICBpZihtb2RhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+PC9idXR0b24+YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7ZGlzcGxheURhdGF9PC9hPmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWxfcm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGJ1dHRvbiBkYXRhLW1vZGFsLXJvdXRlPVwiJHttb2RhbF9yb3V0ZX1cIiBjbGFzcz1cImJ0biBidG4tc3VjY2Vzc1wiPiR7bW9kYWxfcm91dGV9PC9idXR0b24+YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHByb3BlcnR5TmFtZSwgcm93W3Byb3BlcnR5TmFtZV0sIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93W3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZTogbGFiZWwsXG4gICAgICAgICAgICBkYXRhOiBwcm9wZXJ0eU5hbWUgfHwgJycsXG4gICAgICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLnNvcnRhYmxlRmllbGRzLmluY2x1ZGVzKHByb3BlcnR5TmFtZSlcbiAgICAgICAgfVxuICAgICAgICAvLyAuLi5mdW5jdGlvbiBib2R5Li4uXG4gICAgfVxuXG4gICAgZ3Vlc3NDb2x1bW4odilcbiAgICB7XG5cbiAgICAgICAgbGV0IHJlbmRlckZ1bmN0aW9uID0gbnVsbDtcbiAgICAgICAgc3dpdGNoICh2KSB7XG4gICAgICAgICAgICBjYXNlICdpZCc6XG4gICAgICAgICAgICAgICAgcmVuZGVyRnVuY3Rpb24gPSAoIGRhdGEsIHR5cGUsIHJvdywgbWV0YSApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdpZCByZW5kZXInKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiPGI+XCIgKyBkYXRhICsgXCIhITwvYj5cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ld2VzdFB1Ymxpc2hUaW1lJzpcbiAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZVRpbWUnOlxuICAgICAgICAgICAgICAgIHJlbmRlckZ1bmN0aW9uID0gKCBkYXRhLCB0eXBlLCByb3csIG1ldGEgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc29UaW1lID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0ciA9ICBpc29UaW1lID8gJzx0aW1lIGNsYXNzPVwidGltZWFnb1wiIGRhdGV0aW1lPVwiJyArIGRhdGEgKyAnXCI+JyArIGRhdGEgKyAnPC90aW1lPicgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gICAgIHJlbmRlckZ1bmN0aW9uID0gKCBkYXRhLCB0eXBlLCByb3csIG1ldGEgKSA9PiB7IHJldHVybiBkYXRhOyB9XG5cblxuICAgICAgICB9XG4gICAgICAgIGxldCBvYmogPSB7XG4gICAgICAgICAgICB0aXRsZSA6IHYsXG4gICAgICAgICAgICBkYXRhIDogdixcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVuZGVyRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIG9iai5yZW5kZXIgPSByZW5kZXJGdW5jdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4ob2JqKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBkYXRhVGFibGVQYXJhbXNUb0FwaVBsYXRmb3JtUGFyYW1zKHBhcmFtcykge1xuICAgICAgICBsZXQgY29sdW1ucyA9IHBhcmFtcy5jb2x1bW5zOyAvLyBnZXQgdGhlIGNvbHVtbnMgcGFzc2VkIGJhY2sgdG8gdXMsIHNhbml0eS5cbiAgICAgICAgdmFyIGFwaURhdGEgPSB7XG4gICAgICAgICAgICBwYWdlOiAxXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFwaURhdGEuaXRlbXNQZXJQYWdlID0gcGFyYW1zLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNhbWUgYXMgI1tBcGlGaWx0ZXIoTXVsdGlGaWVsZFNlYXJjaEZpbHRlcjo6Y2xhc3MsIHByb3BlcnRpZXM6IFtcImxhYmVsXCIsIFwiY29kZVwiXSwgYXJndW1lbnRzOiBbXCJzZWFyY2hQYXJhbWV0ZXJOYW1lXCI9Plwic2VhcmNoXCJdKV1cbiAgICAgICAgaWYgKHBhcmFtcy5zZWFyY2ggJiYgcGFyYW1zLnNlYXJjaC52YWx1ZSkge1xuICAgICAgICAgICAgYXBpRGF0YVsnc2VhcmNoJ10gPSBwYXJhbXMuc2VhcmNoLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG9yZGVyID0ge307XG4gICAgICAgIC8vIGh0dHBzOi8vamFyZGluLndpcC9hcGkvcHJvamVjdHMuanNvbmxkP3BhZ2U9MSZpdGVtc1BlclBhZ2U9MTQmb3JkZXJbY29kZV09YXNjXG4gICAgICAgIHBhcmFtcy5vcmRlci5mb3JFYWNoKChvLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IGMgPSBwYXJhbXMuY29sdW1uc1tvLmNvbHVtbl07XG4gICAgICAgICAgICBpZiAoYy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJbYy5kYXRhXSA9IG8uZGlyO1xuICAgICAgICAgICAgICAgIC8vIGFwaURhdGEub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgICAgICAgICBhcGlEYXRhWydvcmRlclsnICsgYy5kYXRhICsgJ10nXSA9IG8uZGlyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcihjLCBvcmRlciwgby5jb2x1bW4sIG8uZGlyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuc2VhcmNoQnVpbGRlciAmJiBwYXJhbXMuc2VhcmNoQnVpbGRlci5jcml0ZXJpYSkge1xuICAgICAgICAgICAgcGFyYW1zLnNlYXJjaEJ1aWxkZXIuY3JpdGVyaWEuZm9yRWFjaCggKGMsIGluZGV4KSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihjKTtcbiAgICAgICAgICAgICAgICBhcGlEYXRhW2Mub3JpZ0RhdGEgKyAnW10nXT1jLnZhbHVlMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGNvbHVtbi5zZWFyY2ggJiYgY29sdW1uLnNlYXJjaC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoY29sdW1uKTtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjb2x1bW4uc2VhcmNoLnZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIHRoZSBmaXJzdCBjaGFyYWN0ZXIgZm9yIGEgcmFuZ2UgZmlsdGVyIG9wZXJhdG9yXG5cbiAgICAgICAgICAgICAgICAvLyBkYXRhIGlzIHRoZSBjb2x1bW4gZmllbGQsIGF0IGxlYXN0IGZvciByaWdodCBub3cuXG4gICAgICAgICAgICAgICAgYXBpRGF0YVtjb2x1bW4uZGF0YV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5zdGFydCkge1xuICAgICAgICAgICAgLy8gd2FzIGFwaURhdGEucGFnZSA9IE1hdGguZmxvb3IocGFyYW1zLnN0YXJ0IC8gcGFyYW1zLmxlbmd0aCkgKyAxO1xuICAgICAgICAgICAgYXBpRGF0YS5wYWdlID0gTWF0aC5mbG9vcihwYXJhbXMuc3RhcnQgLyBhcGlEYXRhLml0ZW1zUGVyUGFnZSkgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIG91ciBvd24gZmlsdGVyc1xuICAgICAgICAvLyBhcGlEYXRhWydtYXJraW5nJ10gPSBbJ2ZldGNoX3N1Y2Nlc3MnXTtcblxuICAgICAgICByZXR1cm4gYXBpRGF0YTtcbiAgICB9XG5cbiAgICBpbml0Rm9vdGVyKGVsKSB7XG4gICAgICAgIHJldHVybiA7XG5cbiAgICAgICAgdmFyIGZvb3RlciA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ3Rmb290Jyk7XG4gICAgICAgIGlmIChmb290ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gZG8gbm90IGluaXRpYXRlIHR3aWNlXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFuZGxlSW5wdXQgPSBmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSAkKCc8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiPicpO1xuICAgICAgICAgICAgaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCBjb2x1bW4uZmlsdGVyLnBsYWNlaG9sZGVyIHx8IGNvbHVtbi5kYXRhICk7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kZWJ1ZyAmJiBjb25zb2xlLmxvZygnYWRkaW5nIGZvb3RlcicpO1xuICAgICAgICAvLyB2YXIgdHIgPSAkKCc8dHI+Jyk7XG4gICAgICAgIC8vIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jb2x1bW5zKCkpO1xuICAgICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgPHRmb290PiBlbGVtZW50IGFuZCBhZGQgaXQgdG8gdGhlIHRhYmxlOlxuICAgICAgICB2YXIgZm9vdGVyID0gZWwuY3JlYXRlVEZvb3QoKTtcbiAgICAgICAgZm9vdGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9vdGVyLWFib3ZlJyk7XG5cbiAgICAgICAgdmFyIHRoZWFkID0gZWwucXVlcnlTZWxlY3RvcigndGhlYWQnKTtcbiAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKGZvb3RlciwgdGhlYWQpO1xuXG4vLyBDcmVhdGUgYW4gZW1wdHkgPHRyPiBlbGVtZW50IGFuZCBhZGQgaXQgdG8gdGhlIGZpcnN0IHBvc2l0aW9uIG9mIDx0Zm9vdD46XG4gICAgICAgIHZhciByb3cgPSBmb290ZXIuaW5zZXJ0Um93KDApO1xuXG5cbi8vIEluc2VydCBhIG5ldyBjZWxsICg8dGQ+KSBhdCB0aGUgZmlyc3QgcG9zaXRpb24gb2YgdGhlIFwibmV3XCIgPHRyPiBlbGVtZW50OlxuXG4vLyBBZGQgc29tZSBib2xkIHRleHQgaW4gdGhlIG5ldyBjZWxsOlxuLy8gICAgICAgICBjZWxsLmlubmVySFRNTCA9IFwiPGI+VGhpcyBpcyBhIHRhYmxlIGZvb3RlcjwvYj5cIjtcblxuICAgICAgICB0aGlzLmNvbHVtbnMoKS5mb3JFYWNoKCAoY29sdW1uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBjZWxsID0gcm93Lmluc2VydENlbGwoaW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgLy8gY2VsbC5pbm5lckhUTUwgPSBjb2x1bW4uZGF0YTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIGNvbHVtbi5kYXRhKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFwcGVuZENoaWxkKGlucHV0KTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIChjb2x1bW4uZmlsdGVyID09PSB0cnVlIHx8IGNvbHVtbi5maWx0ZXIudHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgZWwgPSBoYW5kbGVJbnB1dChjb2x1bW4pO1xuICAgICAgICAgICAgICAgIC8vICAgICB9IGVsc2UgaWYgKGNvbHVtbi5maWx0ZXIudHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGVsID0gaGFuZGxlU2VsZWN0KGNvbHVtbik7XG4gICAgICAgICAgICAgICAgLy8gICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHZhciBjZWxsID0gcm93Lmluc2VydENlbGwoaW5kZXgpO1xuICAgICAgICAgICAgICAgIC8vIHZhciB0ZCA9ICQoJzx0ZD4nKTtcbiAgICAgICAgICAgICAgICAvLyBpZiAoY29sdW1uLmZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHZhciBlbDtcbiAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGNvbHVtbi5maWx0ZXIgPT09IHRydWUgfHwgY29sdW1uLmZpbHRlci50eXBlID09PSAnaW5wdXQnKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBlbCA9IGhhbmRsZUlucHV0KGNvbHVtbik7XG4gICAgICAgICAgICAgICAgLy8gICAgIH0gZWxzZSBpZiAoY29sdW1uLmZpbHRlci50eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgZWwgPSBoYW5kbGVTZWxlY3QoY29sdW1uKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgICB0aGF0LmhhbmRsZUZpZWxkU2VhcmNoKHRoaXMuZWwsIGVsLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgdGQuYXBwZW5kKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgLy8gZm9vdGVyID0gJCgnPHRmb290PicpO1xuICAgICAgICAvLyBmb290ZXIuYXBwZW5kKHRyKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coZm9vdGVyKTtcbiAgICAgICAgLy8gdGhpcy5lbC5hcHBlbmQoZm9vdGVyKTtcblxuICAgICAgICAvLyBzZWUgaHR0cDovL2xpdmUuZGF0YXRhYmxlcy5uZXQvZ2loYXJha2EvMS9lZGl0IGZvciBtb3ZpbmcgdGhlIGZvb3RlciB0byBiZWxvdyB0aGUgaGVhZGVyXG4gICAgfVxuXG5cblxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9